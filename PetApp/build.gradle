apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

import java.util.regex.Pattern

ext {
    supportLibraryVersion = '25.4.0'
    grpcVersion = '1.4.0'
}

android {
    compileSdkVersion 30
    buildToolsVersion '31.0.0'

    defaultConfig {
        applicationId "com.demo.pet.petapp"
        minSdkVersion 29
        targetSdkVersion 30
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -fexceptions"
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix = '.debug'
            versionNameSuffix = '-debug'
        }
    }

    externalNativeBuild {
        cmake {
            version "3.18.1"
            path "CMakeLists.txt"
        }
    }

    productFlavors {
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
        resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
    }

    task incrementVersionCode {
        def file = file("src/main/AndroidManifest.xml")
        def text = file.getText()

        // Update version code.
        def codePattern = Pattern.compile("android:versionCode=\"(\\d+)\"")
        def codeMatcher = codePattern.matcher(text)
        codeMatcher.find()
        def code = Integer.parseInt(codeMatcher.group(1))
        def newCode = code + 1
        def codeUpdatedText = codeMatcher.replaceAll("android:versionCode=\"" + newCode + "\"")

        // Update version name.
        def namePattern = Pattern.compile("android:versionName=\"(\\d+)\\.(\\d+)\\.(\\d+)-\\d+\"")
        def nameMatcher = namePattern.matcher(codeUpdatedText)
        nameMatcher.find()
        def major = Integer.parseInt(nameMatcher.group(1))
        def minor = Integer.parseInt(nameMatcher.group(2))
        def patch = Integer.parseInt(nameMatcher.group(3))
        def newName = "android:versionName=\"" + major + "." + minor + "." + patch + "-" + newCode + "\""
        def nameUpdatedText = nameMatcher.replaceAll(newName)

        file.write(nameUpdatedText)
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    tasks.whenTaskAdded { task ->
        if (task.name == "generateReleaseBuildConfig" || task.name == "generateDebugBuildConfig") {
            task.dependsOn("incrementVersionCode")
        }
    }

    // Define APK name and replace.
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            if (output.outputFileName.endsWith(".apk")) {
                def name = getArchivesBaseName()
                def ver = variant.versionName

                switch (variant.name) {
                    case "debug":
                        // NOP.
                        break

                    case "release":
                        output.outputFileName = "${name}_${ver}.apk"
                        break
                }
            }
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/INDEX.LIST'
        exclude 'META-INF/DEPENDENCIES'
    }

    ndkVersion '23.0.7599858'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.20'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.activity:activity-ktx:1.3.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    // Local library or pocket-sphinx.
    implementation project(':pocketsphinx-aar')
    implementation project(':pocketsphinx-models')

    // Network.
    implementation 'com.squareup.okhttp3:okhttp:5.0.0-alpha.2'

    // gRPC for Google Cloud API.
    implementation 'io.grpc:grpc-okhttp:1.41.0'

    // Google Cloud API.
    implementation 'com.google.cloud:google-cloud-speech:2.1.1'
}

task copySecretKey(type: Copy) {
    File secretKey = file "$System.env.GOOGLE_APPLICATION_CREDENTIALS"
    from secretKey.getParent()
    include secretKey.getName()
    into 'src/main/res/raw'
    rename secretKey.getName(), "credential.json"
}
preBuild.dependsOn(copySecretKey)
